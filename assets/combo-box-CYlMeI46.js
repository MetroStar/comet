import{j as l}from"./jsx-runtime-D_zvdyIk.js";import{c as q}from"./select-BgcnNTUP.js";import{c as a}from"./index-BY9Gf3eC.js";import{r as i}from"./iframe-BDLZuKeY.js";import{F as x}from"./form-group-CZMC42k8.js";import{c as V}from"./index-BC9Je7_j.js";const s=({id:e,options:u,required:p,label:d,helperText:c,errors:m,onChange:f,className:h,children:y,defaultValue:n,placeholder:r,...g})=>{const o=i.useRef(null);i.useLayoutEffect(()=>{const t=o.current;return t?.parentNode?.querySelector(`label[for="${e}"]`)&&a.on(t),()=>{t&&a.off(t)}});const b={className:"usa-combo-box",ref:o,...r&&{"data-placeholder":r},...n&&{"data-default-value":n}};return l.jsx(x,{id:`form-group-${e}`,required:p,label:d,helperText:c,errors:m,fieldControl:l.jsx("div",{...b,children:l.jsx("select",{id:e,className:V("usa-select",h),defaultValue:n,onChange:f,...g,children:y??u?.map(q)})})})};try{s.displayName="ComboBox",s.__docgenInfo={description:"A combo box helps users select an item from a large list of options.",displayName:"ComboBox",props:{id:{defaultValue:null,description:`The unique identifier for this component
The unique identifier for the select`,name:"id",required:!1,type:{name:"string"}},name:{defaultValue:null,description:"The name of the select",name:"name",required:!1,type:{name:"string"}},options:{defaultValue:null,description:"The options of the select",name:"options",required:!1,type:{name:"SelectOptionProps[]"}},required:{defaultValue:null,description:"A boolean indicating whether or not the field is required",name:"required",required:!1,type:{name:"boolean"}},label:{defaultValue:null,description:"Label text to display with the input",name:"label",required:!1,type:{name:"string"}},helperText:{defaultValue:null,description:"Helper text to display with the input",name:"helperText",required:!1,type:{name:"string"}},errors:{defaultValue:null,description:"An array of string error messages",name:"errors",required:!1,type:{name:"string | string[]"}},placeholder:{defaultValue:null,description:"The placeholder value to display in the control",name:"placeholder",required:!1,type:{name:"string"}},children:{defaultValue:null,description:"SelectOption components to display as children",name:"children",required:!1,type:{name:"((ReactElement<SelectOptionProps, string | JSXElementConstructor<any>> | ReactElement<SelectOptionProps, string | JSXElementConstructor<...>>[]) & (string | ... 7 more ... | null))"}},onChange:{defaultValue:null,description:"Event handler for when value of the select is changed",name:"onChange",required:!1,type:{name:"ChangeEventHandler<HTMLSelectElement>"}},defaultOption:{defaultValue:null,description:"The default option of the select",name:"defaultOption",required:!1,type:{name:"SelectOptionProps | null"}}}}}catch{}try{combobox.displayName="combobox",combobox.__docgenInfo={description:"A combo box helps users select an item from a large list of options.",displayName:"combobox",props:{id:{defaultValue:null,description:`The unique identifier for this component
The unique identifier for the select`,name:"id",required:!1,type:{name:"string"}},name:{defaultValue:null,description:"The name of the select",name:"name",required:!1,type:{name:"string"}},options:{defaultValue:null,description:"The options of the select",name:"options",required:!1,type:{name:"SelectOptionProps[]"}},required:{defaultValue:null,description:"A boolean indicating whether or not the field is required",name:"required",required:!1,type:{name:"boolean"}},label:{defaultValue:null,description:"Label text to display with the input",name:"label",required:!1,type:{name:"string"}},helperText:{defaultValue:null,description:"Helper text to display with the input",name:"helperText",required:!1,type:{name:"string"}},errors:{defaultValue:null,description:"An array of string error messages",name:"errors",required:!1,type:{name:"string | string[]"}},placeholder:{defaultValue:null,description:"The placeholder value to display in the control",name:"placeholder",required:!1,type:{name:"string"}},children:{defaultValue:null,description:"SelectOption components to display as children",name:"children",required:!1,type:{name:"((ReactElement<SelectOptionProps, string | JSXElementConstructor<any>> | ReactElement<SelectOptionProps, string | JSXElementConstructor<...>>[]) & (string | ... 7 more ... | null))"}},onChange:{defaultValue:null,description:"Event handler for when value of the select is changed",name:"onChange",required:!1,type:{name:"ChangeEventHandler<HTMLSelectElement>"}},defaultOption:{defaultValue:null,description:"The default option of the select",name:"defaultOption",required:!1,type:{name:"SelectOptionProps | null"}}}}}catch{}export{s as C};
