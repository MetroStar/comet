import{j as e}from"./jsx-runtime-CLpGMVip.js";import{r as c,R as x}from"./index-D7xSkP6m.js";import{c as V}from"./index-DFtWylL1.js";import{L as v}from"./label-BvRQRArz.js";import{H as b}from"./helper-text-BmhHZMwR.js";import{E as N}from"./error-messages-BWeax-Kj.js";const g=({id:a=void 0,required:h,label:u,helperText:d,errors:i,validationStatus:y,className:q,fieldControl:n,children:l})=>{var f;const p=V("usa-form-group",{"usa-form-group--error":!!(i&&i.length>0)||y==="error"},q);if(!l&&!n)return e.jsx(e.Fragment,{});if(l)return e.jsx("div",{id:a,className:p,children:l});const r=c.isValidElement(n)?n:void 0;let m=(f=r==null?void 0:r.props)==null?void 0:f.id,t=r;const s=t==null?void 0:t.props.className;if(s==="usa-combo-box"||s==="usa-time-picker"||s==="usa-date-picker"){const o=r==null?void 0:r.props.children;c.isValidElement(o)&&o.props.id&&(m=o.props.id)}else r&&(t=x.cloneElement(r,{"aria-describedby":`${a}-helper-text`}));return e.jsxs("div",{id:a,className:p,children:[u?e.jsx(v,{htmlFor:m,required:h,children:u}):e.jsx(e.Fragment,{}),d?e.jsx(b,{id:`${a}-helper-text`,children:d}):e.jsx(e.Fragment,{}),i?e.jsx(N,{id:`${a}-errors`,errors:i}):e.jsx(e.Fragment,{}),t]})};try{g.displayName="FormGroup",g.__docgenInfo={description:"A wrapper for form elements used to provide validation formatting.",displayName:"FormGroup",props:{id:{defaultValue:{value:"undefined"},description:"The unique identifier for this component",name:"id",required:!1,type:{name:"string"}},required:{defaultValue:null,description:"A boolean indicating whether or not the field is required",name:"required",required:!1,type:{name:"boolean"}},label:{defaultValue:null,description:"Label text to display with the input",name:"label",required:!1,type:{name:"string"}},helperText:{defaultValue:null,description:"Helper text to display with the input",name:"helperText",required:!1,type:{name:"string"}},errors:{defaultValue:null,description:"An array of string error messages",name:"errors",required:!1,type:{name:"string | string[]"}},validationStatus:{defaultValue:null,description:"State based styling to apply to the form group",name:"validationStatus",required:!1,type:{name:"enum",value:[{value:'"success"'},{value:'"error"'}]}},className:{defaultValue:null,description:"Additional class name for the form group",name:"className",required:!1,type:{name:"string"}},fieldControl:{defaultValue:null,description:"The contents of the form group",name:"fieldControl",required:!1,type:{name:"ReactNode"}},children:{defaultValue:null,description:"The contents of the form group",name:"children",required:!1,type:{name:"ReactNode"}}}}}catch{}try{formgroup.displayName="formgroup",formgroup.__docgenInfo={description:"A wrapper for form elements used to provide validation formatting.",displayName:"formgroup",props:{id:{defaultValue:{value:"undefined"},description:"The unique identifier for this component",name:"id",required:!1,type:{name:"string"}},required:{defaultValue:null,description:"A boolean indicating whether or not the field is required",name:"required",required:!1,type:{name:"boolean"}},label:{defaultValue:null,description:"Label text to display with the input",name:"label",required:!1,type:{name:"string"}},helperText:{defaultValue:null,description:"Helper text to display with the input",name:"helperText",required:!1,type:{name:"string"}},errors:{defaultValue:null,description:"An array of string error messages",name:"errors",required:!1,type:{name:"string | string[]"}},validationStatus:{defaultValue:null,description:"State based styling to apply to the form group",name:"validationStatus",required:!1,type:{name:"enum",value:[{value:'"success"'},{value:'"error"'}]}},className:{defaultValue:null,description:"Additional class name for the form group",name:"className",required:!1,type:{name:"string"}},fieldControl:{defaultValue:null,description:"The contents of the form group",name:"fieldControl",required:!1,type:{name:"ReactNode"}},children:{defaultValue:null,description:"The contents of the form group",name:"children",required:!1,type:{name:"ReactNode"}}}}}catch{}export{g as F};
