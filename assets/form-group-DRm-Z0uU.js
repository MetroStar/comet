import{j as e}from"./jsx-runtime-D_zvdyIk.js";import{r as f,e as q}from"./iframe-DKa0YoIq.js";import{c as x}from"./index-Bac-0u3O.js";import{L as v}from"./label-0qqEdO1f.js";import{H as V}from"./helper-text-BRA2CuHl.js";import{E as b}from"./error-messages-_lA7co94.js";const c=({id:r=void 0,required:h,label:d,helperText:u,errors:a,validationStatus:g,className:y,fieldControl:l,children:i})=>{const p=x("usa-form-group",{"usa-form-group--error":!!(a&&a.length>0)||g==="error"},y);if(!i&&!l)return e.jsx(e.Fragment,{});if(i)return e.jsx("div",{id:r,className:p,children:i});const t=f.isValidElement(l)?l:void 0;let m=t?.props?.id,o=t;const n=o?.props.className;if(n==="usa-combo-box"||n==="usa-time-picker"||n==="usa-date-picker"){const s=t?.props.children;f.isValidElement(s)&&s.props.id&&(m=s.props.id)}else t&&(o=q.cloneElement(t,{"aria-describedby":`${r}-helper-text`}));return e.jsxs("div",{id:r,className:p,children:[d?e.jsx(v,{htmlFor:m,required:h,children:d}):e.jsx(e.Fragment,{}),u?e.jsx(V,{id:`${r}-helper-text`,children:u}):e.jsx(e.Fragment,{}),a?e.jsx(b,{id:`${r}-errors`,errors:a}):e.jsx(e.Fragment,{}),o]})};try{c.displayName="FormGroup",c.__docgenInfo={description:"A wrapper for form elements used to provide validation formatting.",displayName:"FormGroup",props:{id:{defaultValue:{value:"undefined"},description:"The unique identifier for this component",name:"id",required:!1,type:{name:"string"}},required:{defaultValue:null,description:"A boolean indicating whether or not the field is required",name:"required",required:!1,type:{name:"boolean"}},label:{defaultValue:null,description:"Label text to display with the input",name:"label",required:!1,type:{name:"string"}},helperText:{defaultValue:null,description:"Helper text to display with the input",name:"helperText",required:!1,type:{name:"string"}},errors:{defaultValue:null,description:"An array of string error messages",name:"errors",required:!1,type:{name:"string | string[]"}},validationStatus:{defaultValue:null,description:"State based styling to apply to the form group",name:"validationStatus",required:!1,type:{name:"enum",value:[{value:'"success"'},{value:'"error"'}]}},className:{defaultValue:null,description:"Additional class name for the form group",name:"className",required:!1,type:{name:"string"}},fieldControl:{defaultValue:null,description:"The contents of the form group",name:"fieldControl",required:!1,type:{name:"ReactNode"}},children:{defaultValue:null,description:"The contents of the form group",name:"children",required:!1,type:{name:"ReactNode"}}}}}catch{}try{formgroup.displayName="formgroup",formgroup.__docgenInfo={description:"A wrapper for form elements used to provide validation formatting.",displayName:"formgroup",props:{id:{defaultValue:{value:"undefined"},description:"The unique identifier for this component",name:"id",required:!1,type:{name:"string"}},required:{defaultValue:null,description:"A boolean indicating whether or not the field is required",name:"required",required:!1,type:{name:"boolean"}},label:{defaultValue:null,description:"Label text to display with the input",name:"label",required:!1,type:{name:"string"}},helperText:{defaultValue:null,description:"Helper text to display with the input",name:"helperText",required:!1,type:{name:"string"}},errors:{defaultValue:null,description:"An array of string error messages",name:"errors",required:!1,type:{name:"string | string[]"}},validationStatus:{defaultValue:null,description:"State based styling to apply to the form group",name:"validationStatus",required:!1,type:{name:"enum",value:[{value:'"success"'},{value:'"error"'}]}},className:{defaultValue:null,description:"Additional class name for the form group",name:"className",required:!1,type:{name:"string"}},fieldControl:{defaultValue:null,description:"The contents of the form group",name:"fieldControl",required:!1,type:{name:"ReactNode"}},children:{defaultValue:null,description:"The contents of the form group",name:"children",required:!1,type:{name:"ReactNode"}}}}}catch{}export{c as F};
