import{j as e}from"./jsx-runtime-CKrituN3.js";import{r as g}from"./index-CBqU2yxZ.js";import"./_commonjsHelpers-BosuxZz1.js";const f=({id:s,name:T,checked:r=!1,label:n,ariaLabel:k,onChange:l})=>{const[o,c]=g.useState(!1),y=j=>{c(!o),l==null||l(j)};return g.useEffect(()=>{c(r)},[r]),e.jsx("div",{className:"toggle",children:e.jsxs("label",{htmlFor:s,className:"toggle-label",tabIndex:0,"aria-label":k,children:[e.jsxs("div",{className:"pos-rel",children:[e.jsx("input",{type:"checkbox",id:s,name:T,className:"toggle-sr-only",checked:o,onChange:y,tabIndex:-1}),e.jsx("div",{className:`toggle-body ${o?"toggle-body-on":""}`}),e.jsx("div",{className:`toggle-dot ${o?"ml-6":"ml-0"}`})]}),n&&e.jsx("span",{className:"toggle-label ml-3",children:n})]})})},b=f;f.__docgenInfo={description:"Used to toggle the state of a single setting on or off.",methods:[],displayName:"Toggle",props:{id:{required:!0,tsType:{name:"string"},description:"The unique identifier for this component"},name:{required:!1,tsType:{name:"string"},description:"The name of the text input"},checked:{required:!1,tsType:{name:"boolean"},description:"Whether the toggle is checked or not",defaultValue:{value:"false",computed:!1}},label:{required:!1,tsType:{name:"string"},description:"A label to display with the toggle"},ariaLabel:{required:!1,tsType:{name:"string"},description:"An accessible label for the toggle"},onChange:{required:!1,tsType:{name:"ChangeEventHandler",elements:[{name:"HTMLInputElement"}],raw:"ChangeEventHandler<HTMLInputElement>"},description:"Custom callback for when input is changed"}}};const q={title:"Extras/Toggle",component:b,argTypes:{id:{control:"text"},name:{control:"text"},checked:{control:"boolean"},label:{control:"text"},ariaLabel:{control:"text"},onChange:{action:"changed"}}},x=s=>e.jsx(b,{...s}),t=x.bind({});t.args={id:"toggle",name:"toggle",checked:!1,label:"Toggle",ariaLabel:"Toggle button"};const a=x.bind({});a.args={...t.args,checked:!0,label:"Checked Toggle",ariaLabel:"Checked toggle button"};var i,d,m;t.parameters={...t.parameters,docs:{...(i=t.parameters)==null?void 0:i.docs,source:{originalSource:"args => <Toggle {...args} />",...(m=(d=t.parameters)==null?void 0:d.docs)==null?void 0:m.source}}};var p,u,h;a.parameters={...a.parameters,docs:{...(p=a.parameters)==null?void 0:p.docs,source:{originalSource:"args => <Toggle {...args} />",...(h=(u=a.parameters)==null?void 0:u.docs)==null?void 0:h.source}}};const v=["Default","Checked"];export{a as Checked,t as Default,v as __namedExportsOrder,q as default};
