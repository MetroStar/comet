import{j as e}from"./jsx-runtime-D_zvdyIk.js";import{r as d}from"./iframe-B0z_kBLT.js";const n=({id:a,name:y,checked:s=!1,label:i,ariaLabel:x,onChange:r})=>{const[o,c]=d.useState(!1),_=k=>{c(!o),r==null||r(k)};return d.useEffect(()=>{c(s)},[s]),e.jsx("div",{className:"toggle",children:e.jsxs("label",{htmlFor:a,className:"toggle-label",tabIndex:0,"aria-label":x,children:[e.jsxs("div",{className:"pos-rel",children:[e.jsx("input",{type:"checkbox",id:a,name:y,className:"toggle-sr-only",checked:o,onChange:_,tabIndex:-1}),e.jsx("div",{className:`toggle-body ${o?"toggle-body-on":""}`}),e.jsx("div",{className:`toggle-dot ${o?"ml-6":"ml-0"}`})]}),i&&e.jsx("span",{className:"toggle-label ml-3",children:i})]})})};try{n.displayName="Toggle",n.__docgenInfo={description:"Used to toggle the state of a single setting on or off.",displayName:"Toggle",props:{id:{defaultValue:null,description:"The unique identifier for this component",name:"id",required:!0,type:{name:"string"}},name:{defaultValue:null,description:"The name of the text input",name:"name",required:!1,type:{name:"string"}},checked:{defaultValue:{value:"false"},description:"Whether the toggle is checked or not",name:"checked",required:!1,type:{name:"boolean"}},label:{defaultValue:null,description:"A label to display with the toggle",name:"label",required:!1,type:{name:"string"}},ariaLabel:{defaultValue:null,description:"An accessible label for the toggle",name:"ariaLabel",required:!1,type:{name:"string"}},onChange:{defaultValue:null,description:"Custom callback for when input is changed",name:"onChange",required:!1,type:{name:"ChangeEventHandler<HTMLInputElement>"}}}}}catch{}try{toggle.displayName="toggle",toggle.__docgenInfo={description:"Used to toggle the state of a single setting on or off.",displayName:"toggle",props:{id:{defaultValue:null,description:"The unique identifier for this component",name:"id",required:!0,type:{name:"string"}},name:{defaultValue:null,description:"The name of the text input",name:"name",required:!1,type:{name:"string"}},checked:{defaultValue:{value:"false"},description:"Whether the toggle is checked or not",name:"checked",required:!1,type:{name:"boolean"}},label:{defaultValue:null,description:"A label to display with the toggle",name:"label",required:!1,type:{name:"string"}},ariaLabel:{defaultValue:null,description:"An accessible label for the toggle",name:"ariaLabel",required:!1,type:{name:"string"}},onChange:{defaultValue:null,description:"Custom callback for when input is changed",name:"onChange",required:!1,type:{name:"ChangeEventHandler<HTMLInputElement>"}}}}}catch{}const C={title:"Extras/Toggle",component:n,argTypes:{id:{control:"text"},name:{control:"text"},checked:{control:"boolean"},label:{control:"text"},ariaLabel:{control:"text"},onChange:{action:"changed"}}},b=a=>e.jsx(n,{...a}),t=b.bind({});t.args={id:"toggle",name:"toggle",checked:!1,label:"Toggle",ariaLabel:"Toggle button"};const l=b.bind({});l.args={...t.args,checked:!0,label:"Checked Toggle",ariaLabel:"Checked toggle button"};var g,u,m;t.parameters={...t.parameters,docs:{...(g=t.parameters)==null?void 0:g.docs,source:{originalSource:"args => <Toggle {...args} />",...(m=(u=t.parameters)==null?void 0:u.docs)==null?void 0:m.source}}};var p,h,f;l.parameters={...l.parameters,docs:{...(p=l.parameters)==null?void 0:p.docs,source:{originalSource:"args => <Toggle {...args} />",...(f=(h=l.parameters)==null?void 0:h.docs)==null?void 0:f.source}}};const V=["Default","Checked"];export{l as Checked,t as Default,V as __namedExportsOrder,C as default};
