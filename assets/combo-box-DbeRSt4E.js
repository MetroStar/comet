import{j as r}from"./jsx-runtime-D_zvdyIk.js";import{c as q}from"./select-Dk-O5ttt.js";import{c as i}from"./index-B7_Jpop9.js";import{r as s}from"./iframe-ChG3UuR9.js";import{F as x}from"./form-group-8TLLYdhI.js";import{c as V}from"./index-BlziFMf9.js";const u=({id:e,options:p,required:d,label:c,helperText:m,errors:f,onChange:h,className:y,children:g,defaultValue:n,placeholder:o,...b})=>{const a=s.useRef(null);s.useLayoutEffect(()=>{const t=a.current;return t?.parentNode?.querySelector(`label[for="${e}"]`)&&i.on(t),()=>{t&&i.off(t)}});const l={className:"usa-combo-box",ref:a};return o&&(l["data-placeholder"]=o),n&&(l["data-default-value"]=n),r.jsx(x,{id:`form-group-${e}`,required:d,label:c,helperText:m,errors:f,fieldControl:r.jsx("div",{...l,children:r.jsx("select",{id:e,className:V("usa-select",y),defaultValue:n,onChange:h,...b,children:g??p?.map(q)})})})};try{u.displayName="ComboBox",u.__docgenInfo={description:"A combo box helps users select an item from a large list of options.",displayName:"ComboBox",props:{id:{defaultValue:null,description:`The unique identifier for this component
The unique identifier for the select`,name:"id",required:!1,type:{name:"string"}},name:{defaultValue:null,description:"The name of the select",name:"name",required:!1,type:{name:"string"}},options:{defaultValue:null,description:"The options of the select",name:"options",required:!1,type:{name:"SelectOptionProps[]"}},required:{defaultValue:null,description:"A boolean indicating whether or not the field is required",name:"required",required:!1,type:{name:"boolean"}},label:{defaultValue:null,description:"Label text to display with the input",name:"label",required:!1,type:{name:"string"}},helperText:{defaultValue:null,description:"Helper text to display with the input",name:"helperText",required:!1,type:{name:"string"}},errors:{defaultValue:null,description:"An array of string error messages",name:"errors",required:!1,type:{name:"string | string[]"}},placeholder:{defaultValue:null,description:"The placeholder value to display in the control",name:"placeholder",required:!1,type:{name:"string"}},children:{defaultValue:null,description:"SelectOption components to display as children",name:"children",required:!1,type:{name:"((ReactElement<SelectOptionProps, string | JSXElementConstructor<any>> | ReactElement<SelectOptionProps, string | JSXElementConstructor<...>>[]) & (string | ... 7 more ... | null))"}},onChange:{defaultValue:null,description:"Event handler for when value of the select is changed",name:"onChange",required:!1,type:{name:"ChangeEventHandler<HTMLSelectElement>"}},defaultOption:{defaultValue:null,description:"The default option of the select",name:"defaultOption",required:!1,type:{name:"SelectOptionProps | null"}}}}}catch{}try{combobox.displayName="combobox",combobox.__docgenInfo={description:"A combo box helps users select an item from a large list of options.",displayName:"combobox",props:{id:{defaultValue:null,description:`The unique identifier for this component
The unique identifier for the select`,name:"id",required:!1,type:{name:"string"}},name:{defaultValue:null,description:"The name of the select",name:"name",required:!1,type:{name:"string"}},options:{defaultValue:null,description:"The options of the select",name:"options",required:!1,type:{name:"SelectOptionProps[]"}},required:{defaultValue:null,description:"A boolean indicating whether or not the field is required",name:"required",required:!1,type:{name:"boolean"}},label:{defaultValue:null,description:"Label text to display with the input",name:"label",required:!1,type:{name:"string"}},helperText:{defaultValue:null,description:"Helper text to display with the input",name:"helperText",required:!1,type:{name:"string"}},errors:{defaultValue:null,description:"An array of string error messages",name:"errors",required:!1,type:{name:"string | string[]"}},placeholder:{defaultValue:null,description:"The placeholder value to display in the control",name:"placeholder",required:!1,type:{name:"string"}},children:{defaultValue:null,description:"SelectOption components to display as children",name:"children",required:!1,type:{name:"((ReactElement<SelectOptionProps, string | JSXElementConstructor<any>> | ReactElement<SelectOptionProps, string | JSXElementConstructor<...>>[]) & (string | ... 7 more ... | null))"}},onChange:{defaultValue:null,description:"Event handler for when value of the select is changed",name:"onChange",required:!1,type:{name:"ChangeEventHandler<HTMLSelectElement>"}},defaultOption:{defaultValue:null,description:"The default option of the select",name:"defaultOption",required:!1,type:{name:"SelectOptionProps | null"}}}}}catch{}export{u as C};
