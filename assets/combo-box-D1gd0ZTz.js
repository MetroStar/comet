import{j as a}from"./jsx-runtime-DPda6Ybg.js";import{c as x}from"./select-BSDXGm39.js";import{c as d}from"./index-B7_m26zB.js";import{r as u}from"./index-DhrokLn_.js";import{F as V}from"./form-group-xsfonisk.js";import{c as T}from"./index-DUolvyrz.js";const p=({id:t,options:n,required:c,label:m,helperText:f,errors:h,onChange:y,className:g,children:b,defaultValue:r,placeholder:o,...q})=>{const i=u.useRef(null);u.useLayoutEffect(()=>{var s;const e=i.current;return((s=e==null?void 0:e.parentNode)==null?void 0:s.querySelector(`label[for="${t}"]`))&&d.on(e),()=>{e&&d.off(e)}});const l={className:"usa-combo-box",ref:i};return o&&(l["data-placeholder"]=o),r&&(l["data-default-value"]=r),a.jsx(V,{id:`form-group-${t}`,required:c,label:m,helperText:f,errors:h,fieldControl:a.jsx("div",{...l,children:a.jsx("select",{id:t,className:T("usa-select",g),defaultValue:r,onChange:y,...q,children:b??(n==null?void 0:n.map(x))})})})};try{p.displayName="ComboBox",p.__docgenInfo={description:"A combo box helps users select an item from a large list of options.",displayName:"ComboBox",props:{id:{defaultValue:null,description:`The unique identifier for this component
The unique identifier for the select`,name:"id",required:!1,type:{name:"string"}},name:{defaultValue:null,description:"The name of the select",name:"name",required:!1,type:{name:"string"}},options:{defaultValue:null,description:"The options of the select",name:"options",required:!1,type:{name:"SelectOptionProps[]"}},required:{defaultValue:null,description:"A boolean indicating whether or not the field is required",name:"required",required:!1,type:{name:"boolean"}},label:{defaultValue:null,description:"Label text to display with the input",name:"label",required:!1,type:{name:"string"}},helperText:{defaultValue:null,description:"Helper text to display with the input",name:"helperText",required:!1,type:{name:"string"}},errors:{defaultValue:null,description:"An array of string error messages",name:"errors",required:!1,type:{name:"string | string[]"}},placeholder:{defaultValue:null,description:"The placeholder value to display in the control",name:"placeholder",required:!1,type:{name:"string"}},children:{defaultValue:null,description:"SelectOption components to display as children",name:"children",required:!1,type:{name:"(ReactElement<SelectOptionProps, string | JSXElementConstructor<any>> | ReactElement<SelectOptionProps, string | JSXElementConstructor<...>>[]) & ReactNode"}},onChange:{defaultValue:null,description:"Event handler for when value of the select is changed",name:"onChange",required:!1,type:{name:"ChangeEventHandler<HTMLSelectElement>"}},defaultOption:{defaultValue:null,description:"The default option of the select",name:"defaultOption",required:!1,type:{name:"SelectOptionProps"}}}}}catch{}try{combobox.displayName="combobox",combobox.__docgenInfo={description:"A combo box helps users select an item from a large list of options.",displayName:"combobox",props:{id:{defaultValue:null,description:`The unique identifier for this component
The unique identifier for the select`,name:"id",required:!1,type:{name:"string"}},name:{defaultValue:null,description:"The name of the select",name:"name",required:!1,type:{name:"string"}},options:{defaultValue:null,description:"The options of the select",name:"options",required:!1,type:{name:"SelectOptionProps[]"}},required:{defaultValue:null,description:"A boolean indicating whether or not the field is required",name:"required",required:!1,type:{name:"boolean"}},label:{defaultValue:null,description:"Label text to display with the input",name:"label",required:!1,type:{name:"string"}},helperText:{defaultValue:null,description:"Helper text to display with the input",name:"helperText",required:!1,type:{name:"string"}},errors:{defaultValue:null,description:"An array of string error messages",name:"errors",required:!1,type:{name:"string | string[]"}},placeholder:{defaultValue:null,description:"The placeholder value to display in the control",name:"placeholder",required:!1,type:{name:"string"}},children:{defaultValue:null,description:"SelectOption components to display as children",name:"children",required:!1,type:{name:"(ReactElement<SelectOptionProps, string | JSXElementConstructor<any>> | ReactElement<SelectOptionProps, string | JSXElementConstructor<...>>[]) & ReactNode"}},onChange:{defaultValue:null,description:"Event handler for when value of the select is changed",name:"onChange",required:!1,type:{name:"ChangeEventHandler<HTMLSelectElement>"}},defaultOption:{defaultValue:null,description:"The default option of the select",name:"defaultOption",required:!1,type:{name:"SelectOptionProps"}}}}}catch{}export{p as C};
