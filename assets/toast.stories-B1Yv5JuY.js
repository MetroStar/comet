import{j as a}from"./jsx-runtime-D_zvdyIk.js";import{r as n}from"./index-CtQTiInQ.js";import{c as C}from"./index-DFtWylL1.js";import{B as _}from"./button-Dm1_l2A6.js";import"./_commonjsHelpers-Cpj98o6Y.js";const i=({id:e,message:l="This is a toast notification",duration:s=3e3,type:r="info",className:t="",onClose:u=()=>{},allowClose:f=!0})=>{const[y,g]=n.useState(!0),[h,v]=n.useState(!1),T=C("toast",`toast--${r}`,t,`${h?"toast--isLeaving":""}`),d=()=>{v(!0),setTimeout(()=>{g(!1),u()},300)};return n.useEffect(()=>{if(s>0){const w=setTimeout(()=>{d()},s);return()=>clearTimeout(w)}},[s]),y?a.jsxs("div",{id:e,className:T,children:[a.jsx("p",{className:"toast__message",children:l}),f&&a.jsx("button",{onClick:d,className:"toast__close-button","aria-label":"Close notification",role:"button",children:"âœ•"})]}):a.jsx(a.Fragment,{})};try{i.displayName="Toast",i.__docgenInfo={description:"",displayName:"Toast",props:{id:{defaultValue:null,description:"The unique identifier for this component",name:"id",required:!0,type:{name:"string"}},message:{defaultValue:{value:"This is a toast notification"},description:"The message to display in the toast",name:"message",required:!1,type:{name:"string"}},duration:{defaultValue:{value:"3000"},description:"Duration in milliseconds to show the toast. Set to 0 for no auto-dismiss",name:"duration",required:!1,type:{name:"number"}},type:{defaultValue:{value:"info"},description:"The type of toast which determines its color scheme",name:"type",required:!1,type:{name:"enum",value:[{value:'"success"'},{value:'"error"'},{value:'"warning"'},{value:'"info"'},{value:'"emergency"'}]}},onClose:{defaultValue:{value:"() => {}"},description:"Callback function when toast is closed either manually or automatically",name:"onClose",required:!1,type:{name:"(() => void)"}},className:{defaultValue:{value:""},description:"A custom class to apply to the component",name:"className",required:!1,type:{name:"string"}},allowClose:{defaultValue:{value:"true"},description:"Whether or not to display the close button",name:"allowClose",required:!1,type:{name:"boolean"}}}}}catch{}try{toast.displayName="toast",toast.__docgenInfo={description:"",displayName:"toast",props:{id:{defaultValue:null,description:"The unique identifier for this component",name:"id",required:!0,type:{name:"string"}},message:{defaultValue:{value:"This is a toast notification"},description:"The message to display in the toast",name:"message",required:!1,type:{name:"string"}},duration:{defaultValue:{value:"3000"},description:"Duration in milliseconds to show the toast. Set to 0 for no auto-dismiss",name:"duration",required:!1,type:{name:"number"}},type:{defaultValue:{value:"info"},description:"The type of toast which determines its color scheme",name:"type",required:!1,type:{name:"enum",value:[{value:'"success"'},{value:'"error"'},{value:'"warning"'},{value:'"info"'},{value:'"emergency"'}]}},onClose:{defaultValue:{value:"() => {}"},description:"Callback function when toast is closed either manually or automatically",name:"onClose",required:!1,type:{name:"(() => void)"}},className:{defaultValue:{value:""},description:"A custom class to apply to the component",name:"className",required:!1,type:{name:"string"}},allowClose:{defaultValue:{value:"true"},description:"Whether or not to display the close button",name:"allowClose",required:!1,type:{name:"boolean"}}}}}catch{}const $={title:"Extras/Toast",component:i,argTypes:{id:{control:"text"},message:{control:"text"},duration:{control:"number"},type:{control:"select",required:!0},onClose:{action:"close"},allowClose:{control:"boolean"},className:{control:!1}},parameters:{docs:{source:{type:"code"}}}},b=e=>{const[l,s]=n.useState([]),r=()=>{const t={key:e.id,id:`toast-${e.type}`,message:`${e.message?e.message:"Default toast notification for "+e.type}`,type:`${e.type}`,duration:`${e.duration?e.duration:3e3}`,allowClose:e.allowClose};s(u=>[...u,t])};return a.jsxs("div",{style:{padding:"16px"},children:[a.jsx(_,{id:"toast-button",onClick:()=>r(),children:"Send Toast"}),a.jsx("div",{children:l.map(t=>a.jsx(i,{id:t.id,message:t.message,type:t.type,duration:t.duration,allowClose:t.allowClose},t.id))})]})},o=b.bind({});o.args={id:"toast-info",message:"This is a toast notification",type:"info",duration:3e3,allowClose:!0};var c,m,p;o.parameters={...o.parameters,docs:{...(c=o.parameters)==null?void 0:c.docs,source:{originalSource:`(args: ToastProps) => {
  const [toasts, setToasts] = useState<any[]>([]);
  const addToast = () => {
    const newToast = {
      key: args.id,
      id: \`toast-\${args.type}\`,
      message: \`\${!args.message ? 'Default toast notification for ' + args.type : args.message}\`,
      type: \`\${args.type}\`,
      duration: \`\${!args.duration ? 3000 : args.duration}\`,
      allowClose: args.allowClose
    };
    setToasts(prev => [...prev, newToast]);
  };
  return <div style={{
    padding: '16px'
  }}>
      <Button id="toast-button" onClick={() => addToast()}>
        Send Toast
      </Button>

      <div>
        {toasts.map(toast => <Toast key={toast.id} id={toast.id} message={toast.message} type={toast.type} duration={toast.duration} allowClose={toast.allowClose} />)}
      </div>
    </div>;
}`,...(p=(m=o.parameters)==null?void 0:m.docs)==null?void 0:p.source}}};const S=["Default"];export{o as Default,S as __namedExportsOrder,$ as default};
