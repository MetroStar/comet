import{j as e}from"./jsx-runtime-D_zvdyIk.js";import{r as c,e as x}from"./iframe-B0z_kBLT.js";import{c as v}from"./index-B2Mt268E.js";import{L as V}from"./label-0qqEdO1f.js";import{H as b}from"./helper-text-BRA2CuHl.js";import{E as N}from"./error-messages-pdO9TZPZ.js";const g=({id:a=void 0,required:h,label:u,helperText:d,errors:i,validationStatus:y,className:q,fieldControl:l,children:n})=>{var f;const p=v("usa-form-group",{"usa-form-group--error":!!(i&&i.length>0)||y==="error"},q);if(!n&&!l)return e.jsx(e.Fragment,{});if(n)return e.jsx("div",{id:a,className:p,children:n});const r=c.isValidElement(l)?l:void 0;let m=(f=r==null?void 0:r.props)==null?void 0:f.id,t=r;const o=t==null?void 0:t.props.className;if(o==="usa-combo-box"||o==="usa-time-picker"||o==="usa-date-picker"){const s=r==null?void 0:r.props.children;c.isValidElement(s)&&s.props.id&&(m=s.props.id)}else r&&(t=x.cloneElement(r,{"aria-describedby":`${a}-helper-text`}));return e.jsxs("div",{id:a,className:p,children:[u?e.jsx(V,{htmlFor:m,required:h,children:u}):e.jsx(e.Fragment,{}),d?e.jsx(b,{id:`${a}-helper-text`,children:d}):e.jsx(e.Fragment,{}),i?e.jsx(N,{id:`${a}-errors`,errors:i}):e.jsx(e.Fragment,{}),t]})};try{g.displayName="FormGroup",g.__docgenInfo={description:"A wrapper for form elements used to provide validation formatting.",displayName:"FormGroup",props:{id:{defaultValue:{value:"undefined"},description:"The unique identifier for this component",name:"id",required:!1,type:{name:"string"}},required:{defaultValue:null,description:"A boolean indicating whether or not the field is required",name:"required",required:!1,type:{name:"boolean"}},label:{defaultValue:null,description:"Label text to display with the input",name:"label",required:!1,type:{name:"string"}},helperText:{defaultValue:null,description:"Helper text to display with the input",name:"helperText",required:!1,type:{name:"string"}},errors:{defaultValue:null,description:"An array of string error messages",name:"errors",required:!1,type:{name:"string | string[]"}},validationStatus:{defaultValue:null,description:"State based styling to apply to the form group",name:"validationStatus",required:!1,type:{name:"enum",value:[{value:'"success"'},{value:'"error"'}]}},className:{defaultValue:null,description:"Additional class name for the form group",name:"className",required:!1,type:{name:"string"}},fieldControl:{defaultValue:null,description:"The contents of the form group",name:"fieldControl",required:!1,type:{name:"ReactNode"}},children:{defaultValue:null,description:"The contents of the form group",name:"children",required:!1,type:{name:"ReactNode"}}}}}catch{}try{formgroup.displayName="formgroup",formgroup.__docgenInfo={description:"A wrapper for form elements used to provide validation formatting.",displayName:"formgroup",props:{id:{defaultValue:{value:"undefined"},description:"The unique identifier for this component",name:"id",required:!1,type:{name:"string"}},required:{defaultValue:null,description:"A boolean indicating whether or not the field is required",name:"required",required:!1,type:{name:"boolean"}},label:{defaultValue:null,description:"Label text to display with the input",name:"label",required:!1,type:{name:"string"}},helperText:{defaultValue:null,description:"Helper text to display with the input",name:"helperText",required:!1,type:{name:"string"}},errors:{defaultValue:null,description:"An array of string error messages",name:"errors",required:!1,type:{name:"string | string[]"}},validationStatus:{defaultValue:null,description:"State based styling to apply to the form group",name:"validationStatus",required:!1,type:{name:"enum",value:[{value:'"success"'},{value:'"error"'}]}},className:{defaultValue:null,description:"Additional class name for the form group",name:"className",required:!1,type:{name:"string"}},fieldControl:{defaultValue:null,description:"The contents of the form group",name:"fieldControl",required:!1,type:{name:"ReactNode"}},children:{defaultValue:null,description:"The contents of the form group",name:"children",required:!1,type:{name:"ReactNode"}}}}}catch{}export{g as F};
